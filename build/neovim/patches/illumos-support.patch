From 8067a89b666a808f159c17623440925efd6432e1 Mon Sep 17 00:00:00 2001
From: "Joshua M. Clulow" <josh@sysmgr.org>
Date: Tue, 4 Jan 2022 15:57:42 -0800
Subject: [PATCH] XXX illumos support

diff -wpruN --no-dereference '--exclude=*.orig' a~/CMakeLists.txt a/CMakeLists.txt
--- a~/CMakeLists.txt	1970-01-01 00:00:00
+++ a/CMakeLists.txt	1970-01-01 00:00:00
@@ -39,6 +39,8 @@ include(InstallHelpers)
 include(PreventInTreeBuilds)
 include(Util)
 
+include(illumos)
+
 #-------------------------------------------------------------------------------
 # Variables
 #-------------------------------------------------------------------------------
diff -wpruN --no-dereference '--exclude=*.orig' a~/cmake/illumos.cmake a/cmake/illumos.cmake
--- a~/cmake/illumos.cmake	1970-01-01 00:00:00
+++ a/cmake/illumos.cmake	1970-01-01 00:00:00
@@ -0,0 +1,11 @@
+if (CMAKE_SYSTEM_NAME STREQUAL "SunOS")
+  # Determine if the host is running an illumos distribution:
+  execute_process(COMMAND /usr/bin/uname -o OUTPUT_VARIABLE UNAME_O
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+  if (UNAME_O STREQUAL "illumos")
+    set(ILLUMOS 1)
+    list(APPEND CMAKE_C_FLAGS "-DNVIM_OS_ILLUMOS=1")
+    list(APPEND gen_cflags "-DNVIM_OS_ILLUMOS=1")
+  endif()
+endif()
diff -wpruN --no-dereference '--exclude=*.orig' a~/cmake.deps/CMakeLists.txt a/cmake.deps/CMakeLists.txt
--- a~/cmake.deps/CMakeLists.txt	1970-01-01 00:00:00
+++ a/cmake.deps/CMakeLists.txt	1970-01-01 00:00:00
@@ -9,6 +9,8 @@ endif()
 # Point CMake at any custom modules we may ship
 list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" "${PROJECT_SOURCE_DIR}/../cmake")
 
+include(illumos)
+
 include(CheckCCompilerFlag)
 include(ExternalProject)
 include(FindPackageHandleStandardArgs)
diff -wpruN --no-dereference '--exclude=*.orig' a~/src/nvim/CMakeLists.txt a/src/nvim/CMakeLists.txt
--- a~/src/nvim/CMakeLists.txt	1970-01-01 00:00:00
+++ a/src/nvim/CMakeLists.txt	1970-01-01 00:00:00
@@ -419,6 +419,9 @@ foreach(sfile ${NVIM_SOURCES})
   if(NOT WIN32 AND ${f} MATCHES "^(os_win_console.c)$")
     list(APPEND to_remove ${sfile})
   endif()
+  if(NOT ILLUMOS AND ${f} MATCHES "^(os_illumos.c)$")
+    list(APPEND to_remove ${sfile})
+  endif()
 endforeach()
 
 list(REMOVE_ITEM NVIM_SOURCES ${to_remove})
diff -wpruN --no-dereference '--exclude=*.orig' a~/src/nvim/os/pty_process_unix.c a/src/nvim/os/pty_process_unix.c
--- a~/src/nvim/os/pty_process_unix.c	1970-01-01 00:00:00
+++ a/src/nvim/os/pty_process_unix.c	1970-01-01 00:00:00
@@ -15,12 +15,8 @@
 # include <libutil.h>
 #elif defined(__OpenBSD__) || defined(__NetBSD__) || defined(__APPLE__)
 # include <util.h>
-#elif defined(__sun)
-# include <fcntl.h>
-# include <signal.h>
-# include <sys/stream.h>
-# include <sys/syscall.h>
-# include <unistd.h>
+#elif defined(NVIM_OS_ILLUMOS)
+# include "nvim/os_illumos.h"
 #else
 # include <pty.h>
 #endif
@@ -46,117 +42,6 @@
 # include "os/pty_process_unix.c.generated.h"
 #endif
 
-#if defined(__sun) && !defined(HAVE_FORKPTY)
-
-// this header defines STR, just as nvim.h, but it is defined as ('S'<<8),
-// to avoid #undef STR, #undef STR, #define STR ('S'<<8) just delay the
-// inclusion of the header even though it gets include out of order.
-# include <sys/stropts.h>
-
-static int openpty(int *amaster, int *aslave, char *name, struct termios *termp,
-                   struct winsize *winp)
-{
-  int slave = -1;
-  int master = open("/dev/ptmx", O_RDWR);
-  if (master == -1) {
-    goto error;
-  }
-
-  // grantpt will invoke a setuid program to change permissions
-  // and might fail if SIGCHLD handler is set, temporarily reset
-  // while running
-  void (*sig_saved)(int) = signal(SIGCHLD, SIG_DFL);
-  int res = grantpt(master);
-  signal(SIGCHLD, sig_saved);
-
-  if (res == -1 || unlockpt(master) == -1) {
-    goto error;
-  }
-
-  char *slave_name = ptsname(master);
-  if (slave_name == NULL) {
-    goto error;
-  }
-
-  slave = open(slave_name, O_RDWR|O_NOCTTY);
-  if (slave == -1) {
-    goto error;
-  }
-
-  // ptem emulates a terminal when used on a pseudo terminal driver,
-  // must be pushed before ldterm
-  ioctl(slave, I_PUSH, "ptem");
-  // ldterm provides most of the termio terminal interface
-  ioctl(slave, I_PUSH, "ldterm");
-  // ttcompat compatibility with older terminal ioctls
-  ioctl(slave, I_PUSH, "ttcompat");
-
-  if (termp) {
-    tcsetattr(slave, TCSAFLUSH, termp);
-  }
-  if (winp) {
-    ioctl(slave, TIOCSWINSZ, winp);
-  }
-
-  *amaster = master;
-  *aslave = slave;
-  // ignoring name, not passed and size is unknown in the API
-
-  return 0;
-
-error:
-  if (slave != -1) {
-    close(slave);
-  }
-  if (master != -1) {
-    close(master);
-  }
-  return -1;
-}
-
-static int login_tty(int fd)
-{
-  setsid();
-  if (ioctl(fd, TIOCSCTTY, NULL) == -1) {
-    return -1;
-  }
-
-  dup2(fd, STDIN_FILENO);
-  dup2(fd, STDOUT_FILENO);
-  dup2(fd, STDERR_FILENO);
-  if (fd > STDERR_FILENO) {
-    close(fd);
-  }
-
-  return 0;
-}
-
-static pid_t forkpty(int *amaster, char *name, struct termios *termp, struct winsize *winp)
-{
-  int master, slave;
-  if (openpty(&master, &slave, name, termp, winp) == -1) {
-    return -1;
-  }
-
-  pid_t pid = fork();
-  switch (pid) {
-  case -1:
-    close(master);
-    close(slave);
-    return -1;
-  case 0:
-    close(master);
-    login_tty(slave);
-    return 0;
-  default:
-    close(slave);
-    *amaster = master;
-    return pid;
-  }
-}
-
-#endif
-
 /// @returns zero on success, or negative error code
 int pty_process_spawn(PtyProcess *ptyproc)
   FUNC_ATTR_NONNULL_ALL
diff -wpruN --no-dereference '--exclude=*.orig' a~/src/nvim/os_illumos.c a/src/nvim/os_illumos.c
--- a~/src/nvim/os_illumos.c	1970-01-01 00:00:00
+++ a/src/nvim/os_illumos.c	1970-01-01 00:00:00
@@ -0,0 +1,176 @@
+#include <sys/types.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stropts.h>
+#include <strings.h>
+#include <errno.h>
+
+#include "nvim/os_illumos.h"
+
+static int
+openpty_failure(int c, int s, int e)
+{
+	if (s >= 0) {
+		(void) close(s);
+	}
+
+	if (c >= 0) {
+		(void) close(c);
+	}
+
+	errno = e;
+	return (-1);
+}
+
+int
+openpty(int *controlp, int *subordp, char *name, const struct termios *termp,
+    const struct winsize *winp)
+{
+	int c = -1;
+	int s = -1;
+	char *sname;
+	int found;
+
+	/*
+	 * Open a pseudo-terminal control device, making sure not to set it as
+	 * the controlling terminal for this process:
+	 */
+	if ((c = posix_openpt(O_RDWR | O_NOCTTY)) < 0) {
+		return (-1);
+	}
+
+	/*
+	 * Set permissions and ownership on the subordinate device and unlock
+	 * it:
+	 */
+	if (grantpt(c) < 0 || unlockpt(c) < 0) {
+		return (openpty_failure(c, s, errno));
+	}
+
+	/*
+	 * Open the subordinate device for this control device, again without
+	 * setting it as the controlling terminal for this process:
+	 */
+	if ((sname = ptsname(c)) == NULL ||
+	    (s = open(sname, O_RDWR | O_NOCTTY)) < 0) {
+		return (openpty_failure(c, s, errno));
+	}
+
+	/*
+	 * Check to see if the STREAMS modules have been automatically pushed:
+	 */
+	if ((found = ioctl(s, I_FIND, "ldterm")) < 0) {
+		return (openpty_failure(c, s, errno));
+	} else if (found == 0) {
+		/*
+		 * The line discipline is not present, so push the appropriate
+		 * STREAMS modules for the subordinate device:
+		 */
+		if (ioctl(s, I_PUSH, "ptem") < 0 ||
+		    ioctl(s, I_PUSH, "ldterm") < 0) {
+			return (openpty_failure(c, s, errno));
+		}
+	}
+
+	/*
+	 * If provided, set the terminal parameters:
+	 */
+	if (termp != NULL && tcsetattr(s, TCSAFLUSH, termp) != 0) {
+		return (openpty_failure(c, s, errno));
+	}
+
+	/*
+	 * If provided, set the window size:
+	 */
+	if (winp != NULL && ioctl(s, TIOCSWINSZ, winp) != 0) {
+		return (openpty_failure(c, s, errno));
+	}
+
+	/*
+	 * If the caller wants the name of the subordinate device, copy it out.
+	 *
+	 * Note that this is a terrible interface: there appears to be no
+	 * standard upper bound on the copy length for this pointer.  Nobody
+	 * should pass anything but NULL here, preferring instead to use
+	 * ptsname(3C) directly.
+	 */
+	if (name != NULL) {
+		strcpy(name, sname);
+	}
+	*controlp = c;
+	*subordp = s;
+	return (0);
+}
+
+int
+login_tty(int t)
+{
+	/*
+	 * Use TIOCSCTTY to set this terminal device as our controlling
+	 * terminal.  This will fail (with ENOTTY) if we are not the leader in
+	 * our own session, so we call setsid() first.  Finally, arrange for
+	 * the pseudo-terminal to occupy the standard I/O descriptors.
+	 */
+	if (setsid() < 0 ||
+	    ioctl(t, TIOCSCTTY, 0) < 0 ||
+	    dup2(t, STDIN_FILENO) < 0 ||
+	    dup2(t, STDOUT_FILENO) < 0 ||
+	    dup2(t, STDERR_FILENO) < 0) {
+		return (-1);
+	}
+
+	/*
+	 * Close the inherited descriptor, taking care to avoid closing the
+	 * standard descriptors by mistake:
+	 */
+	if (t > STDERR_FILENO) {
+		(void) close(t);
+	}
+
+	return (0);
+}
+
+int
+forkpty(int *controlp, char *name, const struct termios *termp,
+    const struct winsize *winp)
+{
+	int s;
+	int c;
+	int pid;
+	if (openpty(&c, &s, name, termp, winp) != 0) {
+		return (-1);
+	}
+	if ((pid = fork()) < 0) {
+		return (openpty_failure(c, s, errno));
+	} else if (pid > 0) {
+		/*
+		 * In the parent process, we close the subordinate device and
+		 * return the process ID of the new child:
+		 */
+		(void) close(s);
+		*controlp = c;
+		return (pid);
+	}
+
+	/*
+	 * The rest of this function executes in the child process.
+	 */
+
+	/*
+	 * Close the control side of the pseudo-terminal pair:
+	 */
+	(void) close(c);
+
+	if (login_tty(s) != 0) {
+		/*
+		 * At this stage there are no particularly good ways to handle
+		 * failure.  Exit as abruptly as possible, using _exit() to
+		 * avoid messing with any state still shared with the parent
+		 * process.
+		 */
+		_exit(EXIT_FAILURE);
+	}
+
+	return (0);
+}
diff -wpruN --no-dereference '--exclude=*.orig' a~/src/nvim/os_illumos.h a/src/nvim/os_illumos.h
--- a~/src/nvim/os_illumos.h	1970-01-01 00:00:00
+++ a/src/nvim/os_illumos.h	1970-01-01 00:00:00
@@ -0,0 +1,11 @@
+#ifndef	NVIM_OS_ILLUMOS_H
+#define	NVIM_OS_ILLUMOS_H
+
+#include <sys/termios.h>
+
+int openpty(int *, int *, char *, const struct termios *,
+    const struct winsize *);
+int login_tty(int);
+int forkpty(int *, char *, const struct termios *, const struct winsize *);
+
+#endif
diff -wpruN --no-dereference '--exclude=*.orig' a~/src/nvim/po/CMakeLists.txt a/src/nvim/po/CMakeLists.txt
--- a~/src/nvim/po/CMakeLists.txt	1970-01-01 00:00:00
+++ a/src/nvim/po/CMakeLists.txt	1970-01-01 00:00:00
@@ -1,5 +1,9 @@
 find_package(Gettext REQUIRED)
+if(ILLUMOS)
+find_program(XGETTEXT_PRG gxgettext)
+else()
 find_program(XGETTEXT_PRG xgettext)
+endif()
 find_program(ICONV_PRG iconv)
 mark_as_advanced(
   GETTEXT_MSGFMT_EXECUTABLE
